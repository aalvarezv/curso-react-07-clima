{"version":3,"sources":["components/Header.jsx","components/Error.jsx","components/Formulario.jsx","components/Clima.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","titulo","className","href","Error","mensaje","Formulario","busqueda","guardarBusqueda","guardarConsultar","useState","error","guardarError","ciudad","pais","handleChange","e","target","name","value","onSubmit","preventDefault","trim","type","id","onChange","htmlFor","Clima","resultado","main","parseFloat","temp","toFixed","temp_max","temp_min","App","componente","consultar","guardarResultado","useEffect","a","url","fetch","respuesta","json","cod","consultarApi","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ef743c4.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Header = ({titulo}) => {\n    return ( <nav>\n        <div className=\"nav-wrapper light-blue darken-2\">\n            <a href='#!' className='brand-logo'>{titulo}</a>\n        </div>\n    </nav> )\n}\n\nHeader.propTypes = {\n    titulo: PropTypes.string.isRequired\n}\n \nexport default Header","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Error = ({mensaje}) => {\nreturn ( <p className=\"red darken-4 error\">{mensaje}</p> );\n}\n\nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\n \nexport default Error;","import React, {useState} from 'react'\nimport Error from './Error'\nimport PropTypes from 'prop-types'\n\nconst Formulario = ({busqueda, guardarBusqueda, guardarConsultar}) => {\n\n    //state error\n    const [error, guardarError] = useState(false)\n\n    //extraer ciudad y pais\n    const {ciudad, pais} = busqueda\n    //funcion que coloca los elementos en el state\n    const handleChange = e => {\n       guardarBusqueda({\n           ...busqueda, [e.target.name]: e.target.value\n       })\n    }\n\n    //envia el formulario\n    const handleSubmit = e =>{\n        e.preventDefault()\n        if (ciudad.trim() === '' || pais.trim() === ''){\n            guardarError(true)\n            return\n        }\n        guardarError(false)\n        guardarConsultar(true)\n    }\n    \n\n    return ( \n        <form \n            onSubmit={handleSubmit}>\n            {error ? <Error mensaje=\"Ambos campos son obligatorios\" /> : null}\n            <div className=\"input-field col s12\">\n                \n                <input\n                    type=\"text\"\n                    name=\"ciudad\"\n                    id=\"ciudad\"\n                    onChange={handleChange}\n                />\n                <label htmlFor=\"ciudad\">Ciudad</label>\n                \n            </div>\n            <div className=\"input-field col s12\">\n                <select\n                    name=\"pais\"\n                    id=\"pais\"\n                    onChange={handleChange}\n                >\n                    <option value=\"\"> Seleccione </option>\n                    <option value=\"US\">Estados Unidos</option>\n                    <option value=\"MX\">México</option>\n                    <option value=\"AR\">Argentina</option>\n                    <option value=\"CO\">Colombia</option>\n                    <option value=\"CR\">Costa Rica</option>\n                    <option value=\"ES\">España</option>\n                    <option value=\"PE\">Perú</option>\n                    <option value=\"CL\">Chile</option>\n                </select>\n                <label htmlFor=\"pais\">País</label>\n            </div>\n            <div className=\"input-field col s12\">\n                 <input \n                    type=\"submit\" \n                    value=\"Consultar Clima\" \n                    className=\"waves-effect waves-light btn-large btn-block yellow accent-4\"\n                />\n            </div>\n           \n           \n        </form>\n\n    );\n}\n\nFormulario.propTypes = {\n    busqueda: PropTypes.object.isRequired,\n    guardarBusqueda: PropTypes.func.isRequired,\n    guardarConsultar: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst Clima = ({resultado}) => {\n\n    const {name, main} = resultado\n    if(!name) return null\n\n    //ºkelvin \n    const kelvin = 273.15\n\n    return ( \n        <div className=\"card-panel white col s12\">\n            <div className=\"black-text\">\n                <h2>El clima de {name} es: </h2>\n                <p className=\"temperatura\">\n                    {parseFloat(main.temp - kelvin).toFixed(1)}<span>&#x2103;</span>\n                </p>\n\n                <p> Temperatura Máxima: \n                    {parseFloat(main.temp_max - kelvin).toFixed(1)}<span>&#x2103;</span>\n                </p>\n\n                <p> Temperatura Mínima: \n                    {parseFloat(main.temp_min - kelvin).toFixed(1)}<span>&#x2103;</span>\n                </p>    \n            </div>\n        </div>\n     );\n}\n\nClima.propTypes = {\n    resultado: PropTypes.object.isRequired\n}\n \nexport default Clima;","import React, { Fragment, useState, useEffect } from 'react'\nimport Header from './components/Header'\nimport Formulario from './components/Formulario'\nimport Clima from './components/Clima'\nimport Error from './components/Error'\n\nfunction App() {\n\n    //state del formulario\n    const [busqueda, guardarBusqueda] = useState({\n        ciudad: '',\n        pais: ''\n    })\n    const { ciudad, pais } = busqueda\n\n    //state para confirmar la consulta\n    const [consultar, guardarConsultar] = useState(false)\n\n    //state para guardar resultado\n    const [resultado, guardarResultado] = useState({})\n\n    //state para guardar error de consulta api\n    const [error, guardarError] = useState(false)\n\n    useEffect(() => {\n\n        const consultarApi = async() => {\n            if (consultar) {\n                const appid = '6c4fc9dc557a1dcf8e85d27047348d05'\n                const url = `https://api.openweathermap.org/data/2.5/weather?q=${ciudad},${pais}&appid=${appid}`\n                const respuesta = await fetch(url)\n                const resultado = await respuesta.json()\n\n                guardarConsultar(false)\n                guardarResultado(resultado)\n               \n                if (resultado.cod !== 200) {\n                    guardarError(true)\n                } else {\n                    guardarError(false)\n                }\n\n            }\n        }\n        consultarApi()\n\n        //deshabilita error de dependencia de useEffect cuando estamos claros que no necesitamos\n        //estar pendiente de la veriable\n        // eslint-disable-next-line\n    }, [consultar])\n\n    let componente;\n    if (error) {\n        componente = < Error mensaje = \"No hay resultados\" / >\n    } else {\n        componente = < Clima resultado = { resultado }\n        />\n    }\n    return ( <\n        Fragment >\n        <\n        Header titulo = 'Clima React App' /\n        >\n        <\n        div className = \"contenedor-form\" >\n        <\n        div className = 'row' >\n        <\n        div className = 'col m6 s12' >\n        <\n        Formulario busqueda = { busqueda }\n        guardarBusqueda = { guardarBusqueda }\n        guardarConsultar = { guardarConsultar }\n        /> <\n        /div> <\n        div className = 'col m6 s12' > { componente } <\n        /div> <\n        /div> <\n        /div> <\n        /Fragment>\n    )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}